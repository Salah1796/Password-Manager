@page "/Account/SignIn"
@using UI.Data.ServiceCredential;
@inject IAccountService _accountService;
@using PasswordManager.Application.Models.ViewModels.Identity;
@using UI.Helper;
@inject IAuthTokenStore _authTokenStore;
@inject NavigationManager NavManager;
@inject IJSRuntime JsRuntime

<div class="container">
    <div class="row mb-3 text-center">
    <h3 class="text-center" >Sign In</h3>
    </div>

    <EditForm Model="authenticationRequest" OnSubmit="Save">
        <div class="row mb-3">
           <div class="col-sm-2">
            <label for="UserName">User Name</label>
            </div>
            <div class="col-sm-10">
                <InputText name="UserName" placeholder="UserName" id="UserName" class="form-control" @bind-Value="authenticationRequest.UserName"></InputText>
            </div>
        </div>

        <div class="row mb-3">
             <div class="col-sm-2">
            <label for="Password">Password</label>
            </div>
            <div class="col-sm-10">
                <InputText type="password" placeholder="Password" name="Password" id="Password" class="form-control" @bind-Value="authenticationRequest.Password"></InputText>
            </div>
        </div>
           <button class="btn btn-primary m-3" type="submit"> SignIn</button>
    </EditForm>
</div>
@code {


    private AuthenticationRequest authenticationRequest = new AuthenticationRequest();

    private async Task Save()
    {
        var response = await _accountService.SignIn(authenticationRequest);

        if (response == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error connecting to server .. ");
        }
        else
        {
            if (response.Success == true)
            {
                if (!string.IsNullOrEmpty(response.Data?.Token))
                {
                    await _authTokenStore.SetToken(response.Data.Token);
                    string url = $"/serviceCredentials";
                    NavManager.NavigateTo(url);
                }
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", response.Message);
            }
        }
     
    }

}