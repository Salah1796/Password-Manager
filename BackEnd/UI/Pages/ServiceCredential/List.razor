@page "/serviceCredentials"

<PageTitle>Service Credentials</PageTitle>
@using PasswordManager.Application.Models.ViewModels;
@using UI.Data.ServiceCredential;
@inject IServiceCredentialService serviceCredentialService ;
@inject NavigationManager NavManager;
@using UI.Helper;
@inject IAuthTokenStore _authTokenStore;
@inject IJSRuntime JsRuntime

@if (serviceCredentials == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ServiceName</th>
                <th>ServiceURL</th>
                <th>AccountUsername</th>
                <th>AccountPassword</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in serviceCredentials)
            {
                <tr>
                    <td>@item.ServiceName</td>
                    <td>@item.ServiceURL</td>
                    <td>@item.AccountUsername</td>
                    <td>@item.AccountPassword</td>
                    <td><button class="btn btn-danger" @onclick="(() => Delete(item.Id))"> <span class="oi oi-trash"></span></button></td>
                    <td><button class="btn btn-primary"  @onclick="(() => Edit(item.Id))">Edit</button> </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<ServiceCredentialLightViewModel> serviceCredentials;
    private ServiceCredentialSearchModel serviceCredentialSearchModel = new ServiceCredentialSearchModel();
    string token;
    protected override async Task OnInitializedAsync()
    {
        token = await _authTokenStore.GetToken();
        if (string.IsNullOrEmpty(token))
        {
            string url = $"/Account/SignIn";
            NavManager.NavigateTo(url);
        }
        else
        {
            var res = await serviceCredentialService.Search(token, serviceCredentialSearchModel);
            serviceCredentials = res?.Data;
        }

    }

    private async Task Delete(Guid Id)
    {
        await serviceCredentialService.Delete(token, Id);
    }

    private async Task Edit(Guid Id)
    {
        string url = $"/serviceCredentials/edit/{Id}";
        NavManager.NavigateTo(url);
    }

}
